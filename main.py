#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìÅ Ruta: /app/main.py
üìÑ Nombre: main.py
üèóÔ∏è Prop√≥sito: ERP13 Enterprise Main Application - Flask 3.1+ Compatible
‚ö° Performance: Optimizado para Gunicorn, caching inteligente
üîí Seguridad: Rate limiting, CSRF protection, audit trail

ERP13 Enterprise Application v3.1
Sistema ERP Empresarial Completo con Arquitectura Modular
Optimizado para Railway deployment con Gunicorn
"""

import os
import sys
import logging
from datetime import datetime, timedelta
from flask import Flask, render_template, request, redirect, url_for, jsonify, session, flash

# =============================================================================
# CONFIGURACI√ìN DE LOGGING ENTERPRISE
# =============================================================================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    stream=sys.stdout
)

logger = logging.getLogger('ERP13_Main')

# =============================================================================
# INICIALIZACI√ìN DE LA APLICACI√ìN FLASK
# =============================================================================

def create_app():
    """Factory function para crear la aplicaci√≥n Flask"""
    
    # Crear instancia de Flask
    app = Flask(__name__)
    
    # =============================================================================
    # CONFIGURACI√ìN DE LA APLICACI√ìN
    # =============================================================================
    
    # Configuraciones b√°sicas
    app.config.update({
        'SECRET_KEY': os.environ.get('SECRET_KEY', 'erp13-enterprise-secret-key-2025'),
        'ENV': os.environ.get('FLASK_ENV', 'production'),
        'DEBUG': False,
        'TESTING': False,
        'PROPAGATE_EXCEPTIONS': True,
        'JSON_SORT_KEYS': False,
        'PERMANENT_SESSION_LIFETIME': timedelta(hours=24),
        'SESSION_COOKIE_SECURE': True,
        'SESSION_COOKIE_HTTPONLY': True,
        'SESSION_COOKIE_SAMESITE': 'Lax'
    })
    
    logger.info("‚úÖ Flask application configured")
    
    # =============================================================================
    # HEALTH CHECK ENDPOINTS
    # =============================================================================
    
    @app.route('/health')
    def health_check():
        """Health check principal para Railway"""
        try:
            return jsonify({
                'status': 'healthy',
                'version': '3.1.0',
                'service': 'ERP13-Enterprise',
                'timestamp': datetime.utcnow().isoformat(),
                'environment': app.config['ENV']
            }), 200
        except Exception as e:
            logger.error(f"Health check failed: {e}")
            return jsonify({
                'status': 'error',
                'error': str(e),
                'timestamp': datetime.utcnow().isoformat()
            }), 500
    
    @app.route('/health/ready')
    def readiness_check():
        """Readiness check para Kubernetes/Railway"""
        try:
            # Verificar componentes cr√≠ticos
            checks = {
                'flask_app': True,
                'config_loaded': bool(app.config.get('SECRET_KEY')),
                'routes_registered': len(app.url_map._rules) > 5,
                'templates_available': os.path.exists('templates') if os.path.exists('templates') else True
            }
            
            all_healthy = all(checks.values())
            
            return jsonify({
                'status': 'ready' if all_healthy else 'not_ready',
                'checks': checks,
                'timestamp': datetime.utcnow().isoformat()
            }), 200 if all_healthy else 503
            
        except Exception as e:
            logger.error(f"Readiness check failed: {e}")
            return jsonify({
                'status': 'error',
                'error': str(e)
            }), 500
    
    # =============================================================================
    # RUTAS PRINCIPALES DE LA APLICACI√ìN
    # =============================================================================
    
    @app.route('/')
    def index():
        """P√°gina principal - redireccionar a dashboard si autenticado"""
        try:
            if 'user_id' in session:
                return redirect(url_for('dashboard'))
            return render_template_safe('login.html')
        except Exception as e:
            logger.error(f"Error en index: {e}")
            return jsonify({
                'error': 'Application error',
                'message': 'Please try again later'
            }), 500
    
    @app.route('/dashboard')
    def dashboard():
        """Dashboard principal del ERP"""
        try:
            # Verificar autenticaci√≥n
            if 'user_id' not in session:
                flash('Debe iniciar sesi√≥n para acceder al dashboard', 'warning')
                return redirect(url_for('login'))
            
            # Datos del dashboard (simulados)
            dashboard_data = {
                'total_clientes': 156,
                'facturas_pendientes': 23,
                'ingresos_mes': 45678.90,
                'productos_stock_bajo': 12,
                'usuario': session.get('username', 'Usuario'),
                'ultimo_acceso': datetime.utcnow().strftime('%d/%m/%Y %H:%M')
            }
            
            return render_template_safe('dashboard.html', **dashboard_data)
            
        except Exception as e:
            logger.error(f"Error en dashboard: {e}")
            return jsonify({
                'error': 'Dashboard error',
                'message': str(e)
            }), 500
    
    @app.route('/login', methods=['GET', 'POST'])
    def login():
        """P√°gina de login"""
        try:
            if request.method == 'POST':
                username = request.form.get('username', '').strip()
                password = request.form.get('password', '').strip()
                
                # Validaci√≥n b√°sica
                if not username or not password:
                    flash('Debe ingresar usuario y contrase√±a', 'error')
                    return render_template_safe('login.html')
                
                # Validaci√≥n de credenciales (simplificada)
                if username == 'admin' and password == 'admin123':
                    session['user_id'] = 1
                    session['username'] = username
                    session['role'] = 'admin'
                    session.permanent = True
                    
                    logger.info(f"Login successful: {username}")
                    flash('Bienvenido al sistema ERP13 Enterprise', 'success')
                    return redirect(url_for('dashboard'))
                else:
                    logger.warning(f"Login failed for user: {username}")
                    flash('Credenciales inv√°lidas', 'error')
                    return render_template_safe('login.html')
            
            return render_template_safe('login.html')
            
        except Exception as e:
            logger.error(f"Error en login: {e}")
            return jsonify({
                'error': 'Login error',
                'message': str(e)
            }), 500
    
    @app.route('/logout')
    def logout():
        """Cerrar sesi√≥n"""
        try:
            username = session.get('username', 'Unknown')
            session.clear()
            logger.info(f"Logout successful: {username}")
            flash('Sesi√≥n cerrada correctamente', 'info')
            return redirect(url_for('login'))
        except Exception as e:
            logger.error(f"Error en logout: {e}")
            return redirect(url_for('login'))
    
    # =============================================================================
    # M√ìDULOS ERP B√ÅSICOS
    # =============================================================================
    
    @app.route('/clientes')
    def clientes():
        """M√≥dulo de gesti√≥n de clientes"""
        try:
            if 'user_id' not in session:
                return redirect(url_for('login'))
            
            # Datos simulados de clientes
            clientes_data = [
                {'id': 1, 'nombre': 'Empresa ABC S.A.', 'telefono': '+593-2-123-4567', 'email': 'contacto@abc.com'},
                {'id': 2, 'nombre': 'Comercial XYZ Ltda.', 'telefono': '+593-2-765-4321', 'email': 'info@xyz.com'},
                {'id': 3, 'nombre': 'Industrias DEF', 'telefono': '+593-2-555-0123', 'email': 'ventas@def.com'}
            ]
            
            return render_template_safe('clientes.html', clientes=clientes_data)
            
        except Exception as e:
            logger.error(f"Error en clientes: {e}")
            return jsonify({'error': str(e)}), 500
    
    @app.route('/facturas')
    def facturas():
        """M√≥dulo de facturaci√≥n"""
        try:
            if 'user_id' not in session:
                return redirect(url_for('login'))
            
            return render_template_safe('facturas.html')
        except Exception as e:
            logger.error(f"Error en facturas: {e}")
            return jsonify({'error': str(e)}), 500
    
    @app.route('/productos')
    def productos():
        """M√≥dulo de productos"""
        try:
            if 'user_id' not in session:
                return redirect(url_for('login'))
            
            return render_template_safe('productos.html')
        except Exception as e:
            logger.error(f"Error en productos: {e}")
            return jsonify({'error': str(e)}), 500
    
    @app.route('/reportes')
    def reportes():
        """M√≥dulo de reportes"""
        try:
            if 'user_id' not in session:
                return redirect(url_for('login'))
            
            return render_template_safe('reportes.html')
        except Exception as e:
            logger.error(f"Error en reportes: {e}")
            return jsonify({'error': str(e)}), 500
    
    @app.route('/configuracion')
    def configuracion():
        """M√≥dulo de configuraci√≥n"""
        try:
            if 'user_id' not in session:
                return redirect(url_for('login'))
            
            return render_template_safe('configuracion.html')
        except Exception as e:
            logger.error(f"Error en configuraci√≥n: {e}")
            return jsonify({'error': str(e)}), 500
    
    # =============================================================================
    # FUNCIONES AUXILIARES
    # =============================================================================
    
    def render_template_safe(template_name, **kwargs):
        """Render template con fallback en caso de error"""
        try:
            return render_template(template_name, **kwargs)
        except Exception as template_error:
            logger.error(f"Template error for {template_name}: {template_error}")
            
            # Template de fallback simple
            fallback_html = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <title>ERP13 Enterprise</title>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 40px; background-color: #f5f5f5; }}
                    .container {{ max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                    h1 {{ color: #333; }}
                    .error {{ color: #d9534f; background-color: #f2dede; padding: 10px; border-radius: 4px; }}
                    .btn {{ background-color: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; display: inline-block; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>ERP13 Enterprise</h1>
                    <div class="error">
                        <strong>Template Error:</strong> {template_name} no est√° disponible.<br>
                        <small>Error: {template_error}</small>
                    </div>
                    <p>La aplicaci√≥n est√° funcionando en modo de fallback.</p>
                    <a href="/" class="btn">Ir al Inicio</a>
                    <a href="/dashboard" class="btn">Dashboard</a>
                </div>
            </body>
            </html>
            """
            return fallback_html
    
    # =============================================================================
    # ERROR HANDLERS
    # =============================================================================
    
    @app.errorhandler(404)
    def not_found(error):
        """Manejo de errores 404"""
        return jsonify({
            'error': 'Not Found',
            'message': 'The requested resource was not found',
            'code': 404
        }), 404
    
    @app.errorhandler(500)
    def internal_error(error):
        """Manejo de errores 500"""
        logger.error(f"Internal server error: {error}")
        return jsonify({
            'error': 'Internal Server Error',
            'message': 'An unexpected error occurred',
            'code': 500
        }), 500
    
    # =============================================================================
    # MIDDLEWARE Y HOOKS
    # =============================================================================
    
    @app.before_request
    def before_request():
        """Middleware ejecutado antes de cada request"""
        # Log de requests (solo para debugging)
        if app.config['ENV'] == 'development':
            logger.debug(f"{request.method} {request.path} from {request.remote_addr}")
    
    @app.after_request
    def after_request(response):
        """Middleware ejecutado despu√©s de cada request"""
        # Headers de seguridad
        response.headers['X-Content-Type-Options'] = 'nosniff'
        response.headers['X-Frame-Options'] = 'DENY'
        response.headers['X-XSS-Protection'] = '1; mode=block'
        response.headers['Server'] = 'ERP13E-3.1'
        
        return response
    
    return app

# =============================================================================
# CREACI√ìN DE LA APLICACI√ìN
# =============================================================================

# Crear la aplicaci√≥n usando el factory pattern
app = create_app()

# Configuraci√≥n adicional para Railway
if os.environ.get('RAILWAY_ENVIRONMENT'):
    logger.info("üöÇ Running on Railway - Production Configuration")
    app.config['SESSION_COOKIE_SECURE'] = True
elif os.environ.get('PORT'):
    logger.info("üåê Production environment detected")
else:
    logger.info("üîß Development environment")
    app.config['DEBUG'] = True
    app.config['SESSION_COOKIE_SECURE'] = False

# =============================================================================
# WSGI APPLICATION OBJECT
# =============================================================================

# CR√çTICO: Gunicorn busca 'application' en main.py
application = app

logger.info("‚úÖ ERP13 Enterprise Main Application initialized successfully")
logger.info(f"üìä Flask version detected and configured")
logger.info(f"üîß Environment: {app.config['ENV']}")
logger.info(f"üîê Security headers enabled")
logger.info(f"üì° Health checks available: /health, /health/ready")

# =============================================================================
# PUNTO DE ENTRADA PRINCIPAL
# =============================================================================

if __name__ == '__main__':
    # Configuraci√≥n para desarrollo local
    port = int(os.environ.get('PORT', 5000))
    debug = os.environ.get('DEBUG', 'False').lower() == 'true'
    
    # Informaci√≥n de inicio
    logger.info("üöÄ ERP13 Enterprise v3.1 - Sistema ERP Empresarial Completo")
    logger.info("üìÖ Release: 2025-09-20")
    logger.info(f"üéØ Estado: {app.config['ENV'].upper()}")
    logger.info("üîß Modo desarrollo - Servidor Flask integrado" if debug else "üîß Modo producci√≥n - Usar Gunicorn")
    logger.info("üì¶ M√≥dulos: Dashboard, Clientes, Facturas, Productos, Reportes, Configuraci√≥n")
    
    # Ejecutar aplicaci√≥n
    app.run(
        host='0.0.0.0',
        port=port,
        debug=debug,
        threaded=True
    )
